{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"thefriendlystars","text":"<p>This package provides tools for making finder charts and visualizations of stars in the sky, based on Gaia data. </p>"},{"location":"documentation/","title":"Writing Documentation","text":""},{"location":"documentation/#writing-documentation","title":"Writing Documentation\u00b6","text":"<p>If you're contributing a new feature to <code>thefriendlystars</code>, please consider also contributing some documentation to explain how your feature works. Here's the very short version of how to add to the documentation:</p> <ol> <li>Install in development mode (see Installation), so you have access to <code>mkdocs</code> and the various extensions needed to render the documentation.</li> <li>Decide whether your explanation would fit well within an existing page or whether you need a new one. In the <code>docs/</code> directory, find the appropriate <code>.ipynb</code> notebook file or create a new one. If you create a new one, add it to the <code>nav:</code> section of the <code>mkdocs.yml</code> file in the main repository directory so that <code>mkdocs</code> will know to include it.</li> <li>Write your example and explanation in a <code>.ipynb</code> file. Your audience should be smart people who want to use the code but don't have much experience with it yet. Be friendly and encouraging!</li> <li>From the Terminal, run <code>mkdocs serve</code>. This will convert all of the source notebooks into a live website, and give you a little address that you can copy and paste into a browser window. While that <code>mkdocs serve</code> command is still running, small changes you make to existing <code>.ipynb</code> source files will appear (sometimes after a few minutes) on the live locally-hosted webserver.</li> <li>Once you're happy with your new documentation, before committing it to the repository, please run \"Kernal &gt; Restart &amp; Clear Output\" or something similar to remove all outputs from the source notebook file. The <code>thefriendlystars</code> repository will hang onto all changes that you commit to it, so it would very quickly get annoyingly large unless we leave the outputs out of committed notebook files. Double check the outputs are all gone, save your notebook, and then commit it to the <code>git</code> repository (see Contributing Code with GitHub).</li> </ol> <p>Periodically, after reviewing and copy-editing the documentation, we'll deploy the newest version up to the web at zkbt.github.io/thefriendlystars/ for all to enjoy.</p>"},{"location":"gaia/","title":"\ud83c\udf0e\ud83d\udd6f\ud83d\uddfa Gaia Positions and Photometry","text":"In\u00a0[1]: Copied! <pre>from astropy.coordinates import SkyCoord\nimport astropy.units as u\nfrom thefriendlystars import get_gaia\n</pre> from astropy.coordinates import SkyCoord import astropy.units as u from thefriendlystars import get_gaia <pre>/Users/zach/Dropbox/zach/code/thefriendlystars/thefriendlystars/gaia.py:373: SyntaxWarning: invalid escape sequence '\\l'\n  save_address = save_address + \"\\lightcurve_data\"\n</pre> <pre>\n---------------------------------------------------------------------------\nModuleNotFoundError                       Traceback (most recent call last)\nCell In[1], line 3\n      1 from astropy.coordinates import SkyCoord\n      2 import astropy.units as u\n----&gt; 3 from thefriendlystars import get_gaia\n\nFile ~/Dropbox/zach/code/thefriendlystars/thefriendlystars/__init__.py:2\n      1 from .version import *\n----&gt; 2 from .gaia import *\n\nFile ~/Dropbox/zach/code/thefriendlystars/thefriendlystars/gaia.py:6\n      4 from astropy.table import QTable\n      5 from astropy.visualization import quantity_support\n----&gt; 6 from gaiaxpy import calibrate\n      7 from matplotlib.colors import Normalize\n      8 from matplotlib.cm import get_cmap\n\nModuleNotFoundError: No module named 'gaiaxpy'</pre> <p>To download some stars, specify a center and a radius, and let the function download data within that radius of that location. This will both download the star magnitudes directly measured with Gaia (<code>G_gaia</code>, <code>BP_gaia</code>, <code>RP_gaia</code>) and use color transformations to estimate the magnitudes in other common filters (<code>g_sloan</code>, <code>r_sloan</code>, <code>i_sloan</code>, <code>V_johnsoncousins</code>, <code>R_johnsoncousins</code>, <code>I_johnsoncousins</code>). With the results, you should have a decent estimate of the brightness of any star you want!</p> In\u00a0[2]: Copied! <pre>random_center = SkyCoord(ra=123.45*u.deg, dec=67.89*u.deg)\nrandom_radius = 10*u.arcmin\nrandom_stars = get_gaia(random_center, radius=random_radius)\n</pre> random_center = SkyCoord(ra=123.45*u.deg, dec=67.89*u.deg) random_radius = 10*u.arcmin random_stars = get_gaia(random_center, radius=random_radius) <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[2], line 3\n      1 random_center = SkyCoord(ra=123.45*u.deg, dec=67.89*u.deg)\n      2 random_radius = 10*u.arcmin\n----&gt; 3 random_stars = get_gaia(random_center, radius=random_radius)\n\nNameError: name 'get_gaia' is not defined</pre> In\u00a0[3]: Copied! <pre>random_stars\n</pre> random_stars <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[3], line 1\n----&gt; 1 random_stars\n\nNameError: name 'random_stars' is not defined</pre> <p>Columns from this table can be extracted via their names.</p> In\u00a0[4]: Copied! <pre>random_stars['ra']\n</pre> random_stars['ra'] <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[4], line 1\n----&gt; 1 random_stars['ra']\n\nNameError: name 'random_stars' is not defined</pre> <p>We can also specify the center by using a star or object's common catalog name.</p> In\u00a0[5]: Copied! <pre>some_stars = get_gaia('GJ 1214')\n</pre> some_stars = get_gaia('GJ 1214') <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[5], line 1\n----&gt; 1 some_stars = get_gaia('GJ 1214')\n\nNameError: name 'get_gaia' is not defined</pre> In\u00a0[6]: Copied! <pre>some_stars\n</pre> some_stars <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[6], line 1\n----&gt; 1 some_stars\n\nNameError: name 'some_stars' is not defined</pre> In\u00a0[7]: Copied! <pre>from thefriendlystars import plot_gaia\n</pre> from thefriendlystars import plot_gaia <pre>\n---------------------------------------------------------------------------\nModuleNotFoundError                       Traceback (most recent call last)\nCell In[7], line 1\n----&gt; 1 from thefriendlystars import plot_gaia\n\nFile ~/Dropbox/zach/code/thefriendlystars/thefriendlystars/__init__.py:2\n      1 from .version import *\n----&gt; 2 from .gaia import *\n\nFile ~/Dropbox/zach/code/thefriendlystars/thefriendlystars/gaia.py:6\n      4 from astropy.table import QTable\n      5 from astropy.visualization import quantity_support\n----&gt; 6 from gaiaxpy import calibrate\n      7 from matplotlib.colors import Normalize\n      8 from matplotlib.cm import get_cmap\n\nModuleNotFoundError: No module named 'gaiaxpy'</pre> In\u00a0[8]: Copied! <pre>plot_gaia(some_stars)\n</pre> plot_gaia(some_stars) <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[8], line 1\n----&gt; 1 plot_gaia(some_stars)\n\nNameError: name 'plot_gaia' is not defined</pre> In\u00a0[9]: Copied! <pre>table = some_stars\n</pre> table = some_stars <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[9], line 1\n----&gt; 1 table = some_stars\n\nNameError: name 'some_stars' is not defined</pre> <p>We can change options to modify the appearance of this finder chart, including changing which filter is used to set the relative sizes of the points.</p> In\u00a0[10]: Copied! <pre>plot_gaia(some_stars, \n          filter='i_sloan',\n          faintest_magnitude_to_show=17,\n          faintest_magnitude_to_label=13,\n          size_of_zero_magnitude=200,\n          unit=u.arcsec)\n</pre> plot_gaia(some_stars,            filter='i_sloan',           faintest_magnitude_to_show=17,           faintest_magnitude_to_label=13,           size_of_zero_magnitude=200,           unit=u.arcsec) <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[10], line 1\n----&gt; 1 plot_gaia(some_stars, \n      2           filter='i_sloan',\n      3           faintest_magnitude_to_show=17,\n      4           faintest_magnitude_to_label=13,\n      5           size_of_zero_magnitude=200,\n      6           unit=u.arcsec)\n\nNameError: name 'plot_gaia' is not defined</pre> <p>With these tools, you can access a table of data and a quick visualization for any patch of the sky you care about!</p> In\u00a0[11]: Copied! <pre>cluster_center = SkyCoord.from_name(\"NGC 457\")\ncluster_stars = get_gaia(cluster_center)\nplot_gaia(cluster_stars, faintest_magnitude_to_label=10)\n</pre> cluster_center = SkyCoord.from_name(\"NGC 457\") cluster_stars = get_gaia(cluster_center) plot_gaia(cluster_stars, faintest_magnitude_to_label=10) <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[11], line 2\n      1 cluster_center = SkyCoord.from_name(\"NGC 457\")\n----&gt; 2 cluster_stars = get_gaia(cluster_center)\n      3 plot_gaia(cluster_stars, faintest_magnitude_to_label=10)\n\nNameError: name 'get_gaia' is not defined</pre>"},{"location":"gaia/#gaia-positions-and-photometry","title":"\ud83c\udf0e\ud83d\udd6f\ud83d\uddfa Gaia Positions and Photometry\u00b6","text":"<p>Often you need to know the magnitude of a star. Fortunately, the space-based Gaia survey has observed the entire sky with incredible precision; basically any star you can see with a moderate ground-based telescope has already been observed by Gaia. Common reasons you might need to download stars from Gaia would be to locate where to put apertures in an image or to use a star you observed as a flux calibrator; this page demonstrates two little tools that might be helpful for those purposes!</p>"},{"location":"gaia/#downloading-gaia-data","title":"Downloading Gaia Data \ud83d\udcbe\u00b6","text":"<p>To get a table of positions and photometry, we can use the <code>get_gaia</code> function. This is a wrapper to <code>astroquery</code> and the fabulous Gaia archive, designed to be quick and easy to use.</p>"},{"location":"gaia/#visualizing-gaia-data","title":"Visualizing Gaia Data \ud83c\udfa8\u00b6","text":"<p>It'd be nice to be able to see this information in a way that's not just a giant table of data. Let's use the <code>plot_gaia</code> tool to plot one of the tables we've already downloaded.</p>"},{"location":"github/","title":"Contributing Code with GitHub","text":""},{"location":"github/#contributing-code-with-github","title":"Contributing Code with GitHub\u00b6","text":"<p>There are oodles of great tutorials on various aspects of contributing to collaborative code projects with GitHub. This page is meant to provide a quick, recipe-like answer to the question \"how do I contribute to the <code>thefriendlystars</code> package?\"</p>"},{"location":"github/#should-i-submit-an-issue-to-the-thefriendlystars-github-repository","title":"Should I submit an Issue to the <code>thefriendlystars</code> GitHub repository?\u00b6","text":"<p>Yes! You tried out <code>thefriendlystars</code> and maybe thought it had some neat features, but you encountered something that didn't work quite how you expected it to, a question that you couldn't find an answer to in the documentation, or a feature that you wished existed. Those would all be great motivations to go to the <code>thefriendlystars</code> GitHub repository to submit an Issue!</p> <p>But...we know you! You're saying to yourself \"Oh, gosh, they have their hands full, I don't want to bother them right now. I'm sure I'm the only one having this problem or with this question about how <code>thefriendlystars</code> works. My idea probably matters only to me and not anyone else. I don't want to make more work for other folks.\" You're wringing your hands and anxiously worrying about about whether to submit an Issue.</p> <p>Still, can we please encourage you share your problem, ask your question, or make your suggestion? Your experience and curiosity and creativity would be extremely valuable contributions to the package, and make it better for everyone. It's super exciting to hear that someone new else trying to use this code package, and every bit of discussion about how to improve it is super helpful. I promise we're very friendly! So, please, hop on over and submit an Issue!</p>"},{"location":"github/#how-do-we-get-started-with-git-and-github","title":"How do we get started with <code>git</code> and GitHub?\u00b6","text":"<p>Yay! You're interested in contributing some code to the <code>thefriendlystars</code> package. The first step will be to make sure you have a basic familiarity with <code>git</code> and GitHub as tools for safe and collaborative coding.</p> <p>Christina Hedges has written some great resources on coding-related workflows for astronomy, including a tutorial for getting started with <code>git</code> and GitHub that you can watch here. If you're entirely new to these tools, please work through her tutorial and then come back here. If you haven't created one yet, make yourself a GitHub account</p>"},{"location":"github/#how-do-we-contribute-new-code","title":"How do we contribute new code?\u00b6","text":"<p>Because we have more than one person working on <code>thefriendlystars</code> code, let's please use separate <code>git</code> branches for developing new features. Using branches allows us to write code in parallel and merge it together later, without constantly having to make sure that everything everybody writes is up-to-date everywhere all at once. We're generally trying to follow something like the Gitflow Workflow, to allow us to make changes to the shared code that are a little bit buffered from the published code used by non-developers.</p> <p>There three branches you should know about, and only two you should probably interact with:</p> <ul> <li>The <code>main</code> branch hosts the published version of the code for public users. New <code>pip</code> versions of the code will be released from the <code>main</code> branch. Most developers will rarely interact directly with the <code>main</code> branch.</li> <li>The <code>develop</code> branch is the active branch for shared development. New feature branches should be created from the <code>develop</code> branch and once they're reviewed be merged back into <code>develop</code>. Occasionally, and only after careful testing and documentation edits, the <code>develop</code> branch will get merged into the <code>main</code> branch and published to <code>pip</code>.</li> <li>Your <code>add-amazing-awesome-new-feature</code> branch (where you replace the name with something more specific and informative) is a temporary branch that you created off of <code>develop</code> to add your amazing awesome new feature. You should make your changes and commits to that branch, and when you're ready to discuss to your contribution (either as a draft or a mostly finished product), you should submit a Pull Request from this feature branch into the <code>develop</code> branch. Features should be tested well enough that they won't break <code>develop</code> when they get merged into it (but if they do, possibly due to a temporary conflict with another feature branch, it's OK because the <code>main</code> branch is still safe). Once it's merged, your feature branch will be deleted, and you can start a new one to add a different new feature.</li> </ul> <p>With these branches, here's what writing some new code for <code>thefriendlystars</code> might look like for you. The following describes using <code>git</code> from the Terminal prompt. In practice, you might interact with <code>git</code> mostly through Visual Studio Code, PyCharm, GitHub Desktop, or some other tool.</p> <ol> <li>Discuss your plans in an Issue. You might start from trying to address an existing issue, or you might add a new issue of your own. Either way, it's really helpful to let other folks know \"here's what I'm trying to do\" to avoid duplicate or unfocused efforts. If you're not already a Collaborator on the <code>thefriendlystars</code> repository, we can add you at this point!</li> <li>Use the Installation instructions to complete the Developer Installation. This will download the <code>develop</code> branch of the <code>thefriendlystars</code> repository onto your computer and set up your environment to point to the repository's directory.</li> </ol> <pre><code>git clone https://github.com/zkbt/thefriendlystars.git\ncd thefriendlystars\npip install -e '.[develop]'\n</code></pre> <ol> <li>Create a new feature branch off of <code>develop</code>. Check out that branch, so that all commits you make will be associated with that branch.</li> </ol> <pre><code>git checkout develop\ngit branch add-amazing-awesome-new-feature\ngit checkout add-amazing-awesome-new-feature\n</code></pre> <ol> <li>Write your code. Ideally you should also please some useful tests, but it's OK for us to iterate on those as more of a conversaion. Once you've saved some changes to the code, commit those changes to your feature branch. (You can confirm you're on your feature branch by running <code>git branch</code> and seeing which branch has the <code>*</code>.)</li> </ol> <pre><code>git add .\ngit commit -m \"{include informative commit message here}\"\n</code></pre> <p>Up to this point, whatever changes you have committed are still only stored on your computer.</p> <ol> <li>To start sharing your new code, push your branch up to GitHub. The first time you run this push command, you'll probably get some instructions about how to link your local branch to a new remote one that you're about to create; follow them.</li> </ol> <pre><code>git push\n</code></pre> <p>Now your branch and most recently pushed commits should appear in the GitHub list of branches.</p> <ol> <li>To ask for your code to be reviewed, either because you think it's finished or because you've completed enough of a draft to be useful to start discussing, submit a Pull Request asking us to pull the code from your feature branch into <code>develop</code>. We'll probably discuss a few aspects of it and suggest some changes, which can be implemented by continuing to push new commits to your feature branch as long as the Pull Request is still open. Once it's tested and works and we're all happy with it, we'll merge the code into <code>develop</code>, from where it will eventually then be merged into the <code>main</code> branch and released in the latest <code>pip</code> version.</li> <li>\ud83c\udf08\ud83c\udf89\ud83e\udd29 Celebrate!</li> </ol>"},{"location":"github/#what-kinds-of-files-should-we-commit","title":"What kinds of files should we commit?\u00b6","text":"<p>Every file change commit to the repository will be stored and able to be recovered in the future. That's great for being able to go back to previous versions in the code's history, but it means that the repository could very easily get very big if we include lots of large files in our commits. Large files are extra troublesome if they change frequently, because then we're storing a new copy of every large file in our repository.</p> <p>Let's try to keep the <code>thefriendlystars</code> repository relatively slim. To do that, please:</p> <ul> <li>Avoid committing large data, image, or movie files to the repository. If you think you need to include a large file (anything over ~1 MB), raise an Issue to discuss your plans. There might be a better alternative.</li> <li>Avoid committing scratch jupyter notebook files where you're testing out new code. The only notebooks that should be committed to <code>thefriendlystars</code> are ones meant to serve as public documentation; those should be stored in the <code>docs/</code> folder as described in Writing Documentation and their outputs should be cleared before saving.</li> </ul>"},{"location":"github/#wait-i-have-a-question-thats-not-answered-here","title":"Wait, I have a question that's not answered here!\u00b6","text":"<p>This page is a whirlwind tour! We probably missed lots of important information. If you have a question, no matter how small or large or seemingly basic, please ask Zach or submit an Issue.</p>"},{"location":"installation/","title":"Installation","text":"In\u00a0[1]: Copied! <pre>import thefriendlystars\n\nthefriendlystars.version()\n</pre> import thefriendlystars  thefriendlystars.version() <pre>/Users/zach/Dropbox/zach/code/thefriendlystars/thefriendlystars/gaia.py:373: SyntaxWarning: invalid escape sequence '\\l'\n  save_address = save_address + \"\\lightcurve_data\"\n</pre> <pre>\n---------------------------------------------------------------------------\nModuleNotFoundError                       Traceback (most recent call last)\nCell In[1], line 1\n----&gt; 1 import thefriendlystars\n      3 thefriendlystars.version()\n\nFile ~/Dropbox/zach/code/thefriendlystars/thefriendlystars/__init__.py:2\n      1 from .version import *\n----&gt; 2 from .gaia import *\n\nFile ~/Dropbox/zach/code/thefriendlystars/thefriendlystars/gaia.py:6\n      4 from astropy.table import QTable\n      5 from astropy.visualization import quantity_support\n----&gt; 6 from gaiaxpy import calibrate\n      7 from matplotlib.colors import Normalize\n      8 from matplotlib.cm import get_cmap\n\nModuleNotFoundError: No module named 'gaiaxpy'</pre> <p>Happy <code>exoplanet-atlas</code>-ing!</p>"},{"location":"installation/#installation","title":"Installation\u00b6","text":"<p>For installing this code we assume you have a Python environment set up, into which you can install packages via <code>pip</code>. If so, please continue to one of the installation options below.</p> <p>If this isn't the case, we recommend installing the Anaconda Python distribution, and using <code>conda</code> to manage the <code>python</code> environment(s) you have installed on your computer. One tutorial (of many) about how to get started with Python and creating <code>conda</code> environments is available here.</p> <p>*In these instructions, you might notice we use <code>thefriendlystars</code> for installing this package or working with its GitHub repository but <code>thefriendlystars</code> whenever we actually import it into Python. *</p>"},{"location":"installation/#basic-installation","title":"Basic Installation\u00b6","text":"<p>If you want to install into your current environment, the basic installation should be pretty simple. From the Terminal or Anaconda Prompt, please run</p> <pre><code>pip install thefriendlystars\n</code></pre> <p>and it should install everything, along with all the necessary dependencies.</p> <p>If you previously installed this package and need to grab a newer version, run</p> <pre><code>pip install --upgrade thefriendlystars\n</code></pre> <p>to download any officially released updates.</p>"},{"location":"installation/#basic-installation-in-new-conda-environment","title":"Basic Installation in New <code>conda</code> Environment\u00b6","text":"<p>If you are at all worried about the installation messing up other existing packages on your computer or if you're having trouble getting a tricky dependency to install, please consider installing into a new <code>conda</code> environment. Environments are independent of each other, so what you install into one shouldn't affect others.</p> <p>From the Terminal or Anaconda Prompt, please run</p> <pre><code>conda create -n my-neato-thefriendlystars-environment python=3.12\n</code></pre> <p>to create a new, empty environment centered on a recent-ish version of <code>python</code>. You may want to choose a shorter name for your neato environment, as it's something you'll need to type every time you want to use this environment. Run</p> <pre><code>conda activate my-neato-thefriendlystars-environment\n</code></pre> <p>to enter than environment. You can check that you're in it by running</p> <pre><code>conda env list\n</code></pre> <p>and looking for a little star next to the environment name. Now, from within this environment, run</p> <pre><code>pip install --upgrade thefriendlystars\n</code></pre> <p>to install <code>thefriendlystars</code> and all its dependencies (or follow the Developer Installation instructions immediately below), into this specific environment.</p> <p>One thing to watch out for is that if you haven't installed whatever tools you use to work with <code>python</code> (such as <code>jupyter</code> or <code>spyder</code>) into this environment, you might not be able to open them or you might open them from your base environment without access to this package. To fix that, run</p> <pre><code>conda install jupyter spyder\n</code></pre> <p>from inside your environment. From now on, whenever you want to use this environment, activate it with</p> <pre><code>conda activate my-neato-thefriendlystars-environment\n</code></pre> <p>and then open your <code>python</code> interface from within that environment, as with any one of these</p> <pre><code>jupyter notebook \njupyter lab\nspyder \n</code></pre> <p>Good luck!</p>"},{"location":"installation/#developer-installation","title":"Developer Installation\u00b6","text":"<p>If you want to install this code while being able to edit and develop it, you can clone its GitHub repository onto your own computer. This allows you to edit it for your own sake and/or to draft changes that can be contributed to the public package (see Contributing \ud83c\udf08 Code with GitHub).</p> <p>To install directly as an editable package on your local computer, run</p> <pre><code>git clone https://github.com/zkbt/thefriendlystars.git\ncd thefriendlystars\npip install -e '.[develop]'\n</code></pre> <p>The <code>-e .</code> will point your environment's <code>thefriendlystars</code> package to your local folder, meaning that any changes you make in the repository will be reflected in what Python sees when it tries to <code>import thefriendlystars</code>. Including the <code>[develop]</code> after the <code>.</code> will install both the dependencies for the package itself and the extra dependencies required for development (= testing and documentation).</p>"},{"location":"installation/#did-it-work","title":"Did it work?\u00b6","text":"<p>You can quickly test whether your installation worked, and what version you have, by running the Python code</p>"},{"location":"testing/","title":"Testing Code Automatically","text":"<p>As we write more and more code, especially bits that start to depend on each other in complicated ways, its easy for bugs and unexpected behavior to creep in. Or, as versions of various dependencies get updated from year to year, some code that used to behave one way might stop working.</p> <p>To help solve these problems, we can write simple tests for our code. When we make changes to the code package, we can run the tests to make sure we haven't broken anything and the code's doing what we want.</p>"},{"location":"testing/#testing-code-automatically","title":"Testing Code Automatically\u00b6","text":""},{"location":"testing/#how-do-we-test-code-with-pytest","title":"How do we test code with <code>pytest</code>?\u00b6","text":"<p>Here's a quick overview of what running tests might look like:</p> <ol> <li>Write a snippet of code that should work if your code is working and (ideally) raise an error if not.</li> <li>Put that code in a function that has the string <code>test</code> in its name, stored in a <code>.py</code> file with <code>test</code> in its name inside the <code>thefriendlystars/tests</code> directory.</li> <li>From the main repository directory, from the command line run <code>pytest</code>. This will search for all your test functions, run them all, and give you a report about what worked and what didn't. (The Developer Installation should have automatically installed <code>pytest</code> for you.)</li> </ol> <p>If one or more of your tests break, you either need to fix something in your code or in your test function. If all of your tests pass, your should celebrate and feel very pleased with yourself.</p>"},{"location":"testing/#what-are-useful-tests","title":"What are useful tests?\u00b6","text":"<p>The most useful tests are the ones you've actually written! It's OK if your automatic tests don't comprehensively cover every single possible way that your code might goof up; often a code's error might be a fundamental conceptual misunderstanding that can only be caught by a clever and cautious human noticing something amiss in a plot.</p> <p>In approximate order from simpler to more sophisticated, tests might look like:</p> <ul> <li>Does this function run on reasonable inputs?</li> <li>Does it run, and give plausible outputs?</li> <li>Does it run, give accurate outputs?</li> <li>Does it run, give accurate outputs, and respond appropriately to changing inputs?</li> <li>Does it run, give accurate outputs, respond appropriately, and raise informative errors when it should?</li> </ul> <p>No matter how detailed and thoughtfully you write your tests, the Universe is complicated, so they might not capture every fascinating way your code might break. Don't aim for perfection; just try to do something.</p>"}]}